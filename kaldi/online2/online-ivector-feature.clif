from "itf/options-itf-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "gmm/diag-gmm-clifwrap.h" import *
from "ivector/ivector-extractor-clifwrap.h" import *
from "feat/online-feature-clifwrap.h" import *
from "base/iostream-clifwrap.h" import *
from "decoder/lattice-faster-online-decoder-clifwrap.h" import *
from "decoder/lattice-faster-online-decoder-ext-clifwrap.h" import *
from "itf/online-feature-itf-clifwrap.h" import *
from "hmm/transition-model-clifwrap.h" import *

from kaldi.itf._online_feature_itf import OnlineFeatureInterface

from "online2/online-ivector-feature.h":
  namespace `kaldi`:

    class OnlineIvectorExtractionConfig:
      lda_mat_rxfilename: str
      global_cmvn_stats_rxfilename: str
      splice_config_rxfilename: str
      cmvn_config_rxfilename: str
      diag_ubm_rxfilename: str
      ivector_extractor_rxfilename: str
      ivector_period: int
      num_gselect: int
      min_post:float
      posterior_scale: float
      max_count: float
      num_cg_iters: int
      use_most_recent_ivector: bool
      greedy_ivector_extractor: bool
      max_remembered_frames: float

      def `Register` as register(self, opts: OptionsItf)

    class `OnlineIvectorExtractionInfo` as _OnlineIvectorExtractionInfo:

      `lda_mat` as _lda_mat: Matrix
      `global_cmvn_stats` as _global_cmvn_stats: DoubleMatrix

      cmvn_opts: OnlineCmvnOptions
      splice_opts: OnlineSpliceOptions

      # @getter
      # def `diag_ubm` as get_diag_ubm(self) -> DiagGmm

      # @setter
      # def `diag_ubm` as set_diag_ubm(self, val: DiagGmm)


      extractor: IvectorExtractor

      ivector_period: int
      num_gselect: int
      min_post: float
      posterior_scale: float
      max_count: float
      num_cg_iters: int
      use_most_recent_ivector: bool
      greedy_ivector_extractor: bool
      max_remembered_frames: float

      @add__init__
      def `OnlineIvectorExtractionInfo` as from_config(self, config: OnlineIvectorExtractionConfig)

      def `Init` as init(self, config: OnlineIvectorExtractionConfig)

      def `Check` as check(self)

    class OnlineIvectorExtractorAdaptationState:
      cmvn_state: OnlineCmvnState
      ivector_stats: OnlineIvectorEstimationStats

      @add__init__
      def `OnlineIvectorExtractorAdaptationState` as from_info(self, info: _OnlineIvectorExtractionInfo)

      @add__init__
      def `OnlineIvectorExtractorAdaptationState` as from_other(self, other: OnlineIvectorExtractorAdaptationState)

      def `LimitFrames` as limit_frames(self, max_remembered_frames: float, posterior_scale: float):
        """Scales down the stats if needed to ensure the number of frames in the speaker-specific CMVN stats does not exceed max_remembered_frames"""

      def `Write` as write(self, os: ostream, binary: bool)

      def `Read` as read(self, is: istream, binary: bool)

    class OnlineIvectorFeature(OnlineFeatureInterface):
      """OnlineIvectorFeature is an online feature-extraction class that's responsible
      for extracting iVectors from raw features such as MFCC, PLP or filterbank."""

      def `OnlineIvectorFeature` as __init__(self, info: _OnlineIvectorExtractionInfo, base_feature: OnlineFeatureInterface):
        """Constructor

        Args:
          base_feature (OnlineIvectorFeature): raw MFCC or PLP or filterbank used to train the iVector extractor
        """

      def `Dim` as dim(self) -> int:
        """Returns the iVector dimension"""

      def `IsLastFrame` as is_last_frame(self, frame: int) -> bool

      def `NumFramesReady` as num_ready_frames(self) -> int

      def `FrameShiftInSeconds` as frame_shift_in_seconds(self) -> float

      def `GetFrame` as get_frame(self, frame: int, feat: VectorBase)

      def `SetAdaptationState` as set_adaptation_state(self, adaptation_state: OnlineIvectorExtractorAdaptationState):
        """Set the adaptation state to a particular value"""

      def `GetAdaptationState` as get_adaptation_state(self, adaptation_state: OnlineIvectorExtractorAdaptationState):
        """Get the adaptation state"""

      def `UbmLogLikePerFrame` as ubm_loglike_per_frame(self) -> float:
        """UBM log-like per frame"""

      def `ObjfImprPerFrame` as objf_impr_per_frame(self) -> float:
        """Objective improvement per frame from iVector estimation"""

      def `NumFrames` as num_frames(self) -> float

      def `UpdateFrameWeights` as update_frame_weights(self, delta_weights: list<tuple<int, float>>)

    class OnlineSilenceWeightingConfig:
      silence_phones_str: str

      silence_weight: float

      max_state_duration: float

      new_data_weight: float

      def `Active` as active(self) -> bool

      def `Register` as register(self, opts: OptionsItf)

      def `RegisterWithPrefix` as register_with_prefix(self, prefix: str, opts: OptionsItf)

    class OnlineSilenceWeighting:
      def `OnlineSilenceWeighting` as __init__(self, trans_model: TransitionModel, config: OnlineSilenceWeightingConfig, frame_subsampling_factor: int = default)

      def `Active` as active(self) -> bool

      def `ComputeCurrentTraceback` as compute_current_traceback(self, decoder: LatticeFasterOnlineDecoder)

      def `ComputeCurrentTraceback` as compute_current_traceback_grammar(self, decoder: LatticeFasterOnlineGrammarDecoder)

      def `GetDeltaWeights` as get_delta_weights(self, num_frames_ready_in: int) -> (delta_weights: list<tuple<int, float>>):
        """Calling this function gets the changes in weight that require us to modify the stats. Output format is (frame-index, delta-weight).

        Args:
          num_frames_ready_in (int): number of frames available at the input of the online iVector extractor class
        """
